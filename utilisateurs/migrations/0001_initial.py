# Generated by Django 5.2.1 on 2025-05-21 12:05

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Hospital',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('location', models.CharField(max_length=30)),
                ('logo', models.ImageField(default='Images/defaultlogohospital.jpeg', upload_to='Images/')),
            ],
        ),
        migrations.CreateModel(
            name='Nationality',
            fields=[
                ('name', models.CharField(max_length=30, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Services',
            fields=[
                ('name', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('icon', models.FileField(upload_to='Images/Icons/')),
            ],
        ),
        migrations.CreateModel(
            name='Specialisation',
            fields=[
                ('name', models.CharField(max_length=30, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('numero_carte_biometrique', models.CharField(blank=True, max_length=50)),
                ('sex', models.CharField(blank=True, choices=[('MALE', 'Male'), ('FEMALE', 'Female')], max_length=10)),
                ('date_of_birth', models.DateField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(datetime.date(2025, 5, 21))])),
                ('city', models.CharField(blank=True, max_length=30)),
                ('quarter', models.CharField(blank=True, max_length=50)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('marital_status', models.CharField(blank=True, choices=[('MARRIED', 'Married'), ('SINGLE', 'Single')], max_length=10)),
                ('blood_group', models.CharField(blank=True, choices=[('A', 'A'), ('A+', 'A+'), ('A-', 'A-'), ('B', 'B'), ('B+', 'B+'), ('B-', 'B-'), ('AB', 'AB'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O', 'O'), ('O+', 'O+'), ('O-', 'O-')], max_length=4)),
                ('religion', models.CharField(blank=True, choices=[('CHRISTIAN', 'Christian'), ('MUSLIM', 'Muslim'), ('ANEMIST', 'Anemist '), ('BUDDHIST', 'Buddhist'), ('JUDAIST', 'Judaist'), ('HINDUS', 'Hindus'), ('NOTHING', 'Nothing')], max_length=15)),
                ('occupation', models.CharField(blank=True, max_length=50)),
                ('allergy', models.CharField(blank=True, max_length=30)),
                ('nationality', models.CharField(max_length=150)),
                ('profil', models.ImageField(default='Images/defaultprofil.jpeg', upload_to='Images/')),
                ('onseat', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('created_at', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='users', to='utilisateurs.hospital')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalUser',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(db_index=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('numero_carte_biometrique', models.CharField(blank=True, max_length=50)),
                ('city', models.CharField(blank=True, max_length=30)),
                ('quarter', models.CharField(blank=True, max_length=50)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('religion', models.CharField(blank=True, choices=[('CHRISTIAN', 'Christian'), ('MUSLIM', 'Muslim'), ('ANEMIST', 'Anemist '), ('BUDDHIST', 'Buddhist'), ('JUDAIST', 'Judaist'), ('HINDUS', 'Hindus'), ('NOTHING', 'Nothing')], max_length=15)),
                ('occupation', models.CharField(blank=True, max_length=50)),
                ('allergy', models.CharField(blank=True, max_length=30)),
                ('nationality', models.CharField(max_length=150)),
                ('profil', models.TextField(default='Images/defaultprofil.jpeg', max_length=100)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical user',
                'verbose_name_plural': 'historical users',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Autorisation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('id_Person', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='autorisations', to=settings.AUTH_USER_MODEL)),
                ('id_Hospital', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='autorisations', to='utilisateurs.hospital')),
            ],
        ),
        migrations.CreateModel(
            name='PersonFollowPerson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.BooleanField(default=True)),
                ('relationship', models.CharField(max_length=20)),
                ('consent', models.FileField(blank=True, null=True, upload_to='Uploads/')),
                ('id_Followed', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='followed', to=settings.AUTH_USER_MODEL)),
                ('id_Follower', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='follower', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='follow',
            field=models.ManyToManyField(through='utilisateurs.PersonFollowPerson', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='HistoricalServicesInHospital',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('date_added', models.DateTimeField(blank=True, editable=False)),
                ('is_active', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('id_Hospital', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='utilisateurs.hospital')),
                ('id_Service', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='utilisateurs.services')),
            ],
            options={
                'verbose_name': 'historical services in hospital',
                'verbose_name_plural': 'historical services in hospitals',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEmployeeIntervenInService',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, validators=[django.core.validators.MaxValueValidator(django.utils.timezone.now)])),
                ('chief', models.BooleanField(default=False)),
                ('status', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('id_Employee', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('id_Hospital', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='utilisateurs.hospital')),
                ('id_Service', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='utilisateurs.services')),
            ],
            options={
                'verbose_name': 'historical employee interven in service',
                'verbose_name_plural': 'historical employee interven in services',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEmployeeWorkInHospital',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('start_date', models.DateField(validators=[django.core.validators.MaxValueValidator(datetime.date(2025, 5, 21))])),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('id_Employee', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('id_Hospital', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='utilisateurs.hospital')),
                ('specialisation', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='utilisateurs.specialisation')),
            ],
            options={
                'verbose_name': 'historical employee work in hospital',
                'verbose_name_plural': 'historical employee work in hospitals',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='VerificationCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='codes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EmployeeIntervenInService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, validators=[django.core.validators.MaxValueValidator(django.utils.timezone.now)])),
                ('chief', models.BooleanField(default=False)),
                ('status', models.BooleanField(default=True)),
                ('id_Employee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('id_Hospital', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='utilisateurs.hospital')),
                ('id_Service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='utilisateurs.services')),
            ],
            options={
                'unique_together': {('id_Hospital', 'id_Employee', 'id_Service', 'date')},
            },
        ),
        migrations.CreateModel(
            name='ServicesInHospital',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('number_of_beds', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('id_Hospital', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='services', to='utilisateurs.hospital')),
                ('id_Service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='utilisateurs.services')),
            ],
            options={
                'unique_together': {('id_Hospital', 'id_Service')},
            },
        ),
        migrations.CreateModel(
            name='EmployeeWorkInHospital',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(validators=[django.core.validators.MaxValueValidator(datetime.date(2025, 5, 21))])),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('id_Employee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('id_Hospital', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='utilisateurs.hospital')),
                ('specialisation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='persons', to='utilisateurs.specialisation')),
            ],
            options={
                'unique_together': {('id_Hospital', 'id_Employee', 'start_date')},
            },
        ),
    ]
